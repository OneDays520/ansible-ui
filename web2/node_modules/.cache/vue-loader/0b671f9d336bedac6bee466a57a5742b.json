{"remainingRequest":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/src/components/TaskForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/src/components/TaskForm.vue","mtime":1638939511831},{"path":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBJdGVtRm9ybUJhc2UgZnJvbSAnQC9jb21wb25lbnRzL0l0ZW1Gb3JtQmFzZSc7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CgpleHBvcnQgZGVmYXVsdCB7CiAgbWl4aW5zOiBbSXRlbUZvcm1CYXNlXSwKICBwcm9wczogewogICAgdGVtcGxhdGVJZDogTnVtYmVyLAogICAgY29tbWl0SGFzaDogU3RyaW5nLAogICAgY29tbWl0TWVzc2FnZTogU3RyaW5nLAogICAgYnVpbGRUYXNrOiBPYmplY3QsCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdGVtcGxhdGU6IG51bGwsCiAgICAgIGJ1aWxkVGFza3M6IG51bGwsCiAgICAgIGNvbW1pdEF2YWlsYWJsZTogbnVsbCwKICAgIH07CiAgfSwKICB3YXRjaDogewogICAgbmVlZFJlc2V0KHZhbCkgewogICAgICBpZiAodmFsKSB7CiAgICAgICAgdGhpcy5pdGVtLnRlbXBsYXRlX2lkID0gdGhpcy50ZW1wbGF0ZUlkOwogICAgICB9CiAgICB9LAoKICAgIHRlbXBsYXRlSWQodmFsKSB7CiAgICAgIHRoaXMuaXRlbS50ZW1wbGF0ZV9pZCA9IHZhbDsKICAgIH0sCgogICAgY29tbWl0SGFzaCh2YWwpIHsKICAgICAgdGhpcy5pdGVtLmNvbW1pdF9oYXNoID0gdmFsOwogICAgICB0aGlzLmNvbW1pdEF2YWlsYWJsZSA9IHRoaXMuaXRlbS5jb21taXRfaGFzaCAhPSBudWxsOwogICAgfSwKCiAgICB2ZXJzaW9uKHZhbCkgewogICAgICB0aGlzLml0ZW0udmVyc2lvbiA9IHZhbDsKICAgIH0sCgogICAgY29tbWl0QXZhaWxhYmxlKHZhbCkgewogICAgICB0aGlzLml0ZW0uY29tbWl0X2hhc2ggPSB2YWwgPyB0aGlzLmNvbW1pdEhhc2ggOiBudWxsOwogICAgfSwKICB9LAoKICBtZXRob2RzOiB7CiAgICBpc0xvYWRlZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXRlbSAhPSBudWxsCiAgICAgICAgICAmJiB0aGlzLnRlbXBsYXRlICE9IG51bGwKICAgICAgICAgICYmIHRoaXMuYnVpbGRUYXNrcyAhPSBudWxsOwogICAgfSwKCiAgICBhc3luYyBhZnRlckxvYWREYXRhKCkgewogICAgICB0aGlzLml0ZW0udGVtcGxhdGVfaWQgPSB0aGlzLnRlbXBsYXRlSWQ7CgogICAgICB0aGlzLnRlbXBsYXRlID0gKGF3YWl0IGF4aW9zKHsKICAgICAgICBrZXlzOiAnZ2V0JywKICAgICAgICB1cmw6IGAvYXBpL3Byb2plY3QvJHt0aGlzLnByb2plY3RJZH0vdGVtcGxhdGVzLyR7dGhpcy50ZW1wbGF0ZUlkfWAsCiAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsCiAgICAgIH0pKS5kYXRhOwoKICAgICAgdGhpcy5idWlsZFRhc2tzID0gdGhpcy50ZW1wbGF0ZS50eXBlID09PSAnZGVwbG95JyA/IChhd2FpdCBheGlvcyh7CiAgICAgICAga2V5czogJ2dldCcsCiAgICAgICAgdXJsOiBgL2FwaS9wcm9qZWN0LyR7dGhpcy5wcm9qZWN0SWR9L3RlbXBsYXRlcy8ke3RoaXMudGVtcGxhdGUuYnVpbGRfdGVtcGxhdGVfaWR9L3Rhc2tzYCwKICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJywKICAgICAgfSkpLmRhdGEuZmlsdGVyKCh0YXNrKSA9PiB0YXNrLnZlcnNpb24gIT0gbnVsbCAmJiB0YXNrLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSA6IFtdOwoKICAgICAgaWYgKHRoaXMuYnVpbGRUYXNrcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5pdGVtLmJ1aWxkX3Rhc2tfaWQgPSB0aGlzLmJ1aWxkX3Rhc2sgPyB0aGlzLmJ1aWxkX3Rhc2suaWQgOiB0aGlzLmJ1aWxkVGFza3NbMF0uaWQ7CiAgICAgIH0KCiAgICAgIHRoaXMuY29tbWl0QXZhaWxhYmxlID0gdGhpcy5jb21taXRIYXNoICE9IG51bGw7CiAgICB9LAoKICAgIGdldEl0ZW1zVXJsKCkgewogICAgICByZXR1cm4gYC9hcGkvcHJvamVjdC8ke3RoaXMucHJvamVjdElkfS90YXNrc2A7CiAgICB9LAogIH0sCn07Cg=="},{"version":3,"sources":["TaskForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"TaskForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-form\n      ref=\"form\"\n      lazy-validation\n      v-model=\"formValid\"\n      v-if=\"isLoaded()\"\n  >\n    <v-alert\n        :value=\"formError\"\n        color=\"error\"\n        class=\"pb-2\"\n    >{{ formError }}\n    </v-alert>\n\n    <v-alert\n        color=\"blue\"\n        dark\n        icon=\"mdi-source-fork\"\n        dismissible\n        v-model=\"commitAvailable\"\n        prominent\n    >\n      <div\n          style=\"font-weight: bold;\"\n      >{{ commitHash ? commitHash.substr(0, 10) : '' }}\n      </div>\n      <div v-if=\"commitMessage\">{{ commitMessage }}</div>\n    </v-alert>\n\n    <v-select\n        v-if=\"template.type === 'deploy'\"\n        v-model=\"item.build_task_id\"\n        label=\"Build版本\"\n        :items=\"buildTasks\"\n        item-value=\"id\"\n        :item-text=\"(itm) => itm.version + (itm.message ? ' — ' + itm.message : '')\"\n        :rules=\"[v => !!v || 'Build Version is required']\"\n        required\n        :disabled=\"formSaving\"\n    />\n\n    <v-text-field\n        v-model=\"item.message\"\n        label=\"Message (Optional)\"\n        :disabled=\"formSaving\"\n    />\n\n    <v-row no-gutters>\n      <v-col>\n        <v-checkbox\n            v-model=\"item.debug\"\n            label=\"Debug\"\n        ></v-checkbox>\n      </v-col>\n      <v-col>\n        <v-checkbox\n            v-model=\"item.dry_run\"\n            label=\"Dry Run\"\n        ></v-checkbox>\n      </v-col>\n    </v-row>\n\n  </v-form>\n</template>\n<script>\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\n\nexport default {\n  mixins: [ItemFormBase],\n  props: {\n    templateId: Number,\n    commitHash: String,\n    commitMessage: String,\n    buildTask: Object,\n  },\n  data() {\n    return {\n      template: null,\n      buildTasks: null,\n      commitAvailable: null,\n    };\n  },\n  watch: {\n    needReset(val) {\n      if (val) {\n        this.item.template_id = this.templateId;\n      }\n    },\n\n    templateId(val) {\n      this.item.template_id = val;\n    },\n\n    commitHash(val) {\n      this.item.commit_hash = val;\n      this.commitAvailable = this.item.commit_hash != null;\n    },\n\n    version(val) {\n      this.item.version = val;\n    },\n\n    commitAvailable(val) {\n      this.item.commit_hash = val ? this.commitHash : null;\n    },\n  },\n\n  methods: {\n    isLoaded() {\n      return this.item != null\n          && this.template != null\n          && this.buildTasks != null;\n    },\n\n    async afterLoadData() {\n      this.item.template_id = this.templateId;\n\n      this.template = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.templateId}`,\n        responseType: 'json',\n      })).data;\n\n      this.buildTasks = this.template.type === 'deploy' ? (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.template.build_template_id}/tasks`,\n        responseType: 'json',\n      })).data.filter((task) => task.version != null && task.status === 'success') : [];\n\n      if (this.buildTasks.length > 0) {\n        this.item.build_task_id = this.build_task ? this.build_task.id : this.buildTasks[0].id;\n      }\n\n      this.commitAvailable = this.commitHash != null;\n    },\n\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/tasks`;\n    },\n  },\n};\n</script>\n"]}]}