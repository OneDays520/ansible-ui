{"remainingRequest":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/thread-loader/dist/cjs.js!/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/babel-loader/lib/index.js!/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/src/components/EditViewsForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/src/components/EditViewsForm.vue","mtime":1638860208857},{"path":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lx/go/src/github.com/ansible-semaphore/semaphore/web2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["EditViewsForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div v-if=\"views != null\">\n    <draggable\n        v-if=\"views.length > 0\"\n        :list=\"views\"\n        handle=\".handle6785\"\n        class=\"mb-5\"\n        @end=\"onDragEnd\"\n    >\n      <div v-for=\"(view) in views\" :key=\"view.id\" class=\"d-flex mb-2\">\n        <v-icon class=\"handle6785\" style=\"cursor: move;\">mdi-menu</v-icon>\n        <v-text-field\n            class=\"ml-4 mr-1\"\n            hide-details\n            dense\n            solo\n            :flat=\"!view.active\"\n            v-model=\"view.title\"\n            @focus=\"editView(view.id)\"\n            :disabled=\"view.disabled\"\n        />\n        <v-btn\n            class=\"mt-1\"\n            small\n            icon\n            @click=\"saveView(view.id)\"\n            v-if=\"view.active\"\n            :disabled=\"view.disabled\"\n        >\n          <v-icon small color=\"green\">mdi-check</v-icon>\n        </v-btn>\n        <v-btn\n            class=\"mt-1\"\n            small\n            icon\n            @click=\"resetView(view.id)\"\n            v-if=\"view.active && view.id > 0\"\n            :disabled=\"view.disabled\"\n        >\n          <v-icon small color=\"red\">mdi-close</v-icon>\n        </v-btn>\n\n        <v-btn class=\"ml-4\" icon @click=\"removeView(view.id)\">\n          <v-icon>mdi-close</v-icon>\n        </v-btn>\n      </div>\n    </draggable>\n    <v-alert\n        v-else\n        type=\"info\"\n    >无视图</v-alert>\n    <v-btn @click=\"addView()\" color=\"primary\">添加视图</v-btn>\n  </div>\n</template>\n\n<script>\nimport draggable from 'vuedraggable';\nimport axios from 'axios';\n\nexport default {\n  props: {\n    projectId: Number,\n  },\n\n  components: {\n    draggable,\n  },\n\n  async created() {\n    this.views = (await axios({\n      method: 'get',\n      url: `/api/project/${this.projectId}/views`,\n      responseType: 'json',\n    })).data.map((view) => ({\n      ...view,\n      active: false,\n      disabled: false,\n    }));\n    this.views.sort((v1, v2) => v1.position - v2.position);\n  },\n\n  data() {\n    return {\n      views: null,\n    };\n  },\n  methods: {\n    async onDragEnd() {\n      const viewPositions = this.views.reduce((ret, view, index) => {\n        if (view.id < 0 || view.position === index) {\n          return ret;\n        }\n        return {\n          ...ret,\n          [view.id]: index,\n        };\n      }, {});\n\n      await axios({\n        method: 'post',\n        url: `/api/project/${this.projectId}/views/positions`,\n        responseType: 'json',\n        data: viewPositions,\n      });\n\n      Object.keys(viewPositions).map((id) => parseInt(id, 10)).forEach((id) => {\n        const view = this.views.find((v) => v.id === id);\n        view.position = viewPositions[id];\n      });\n    },\n\n    async saveView(viewId) {\n      const i = this.views.findIndex((v) => v.id === viewId);\n      if (i === -1) {\n        return;\n      }\n\n      const view = this.views[i];\n\n      if (!view.title) {\n        return;\n      }\n\n      view.disabled = true;\n      try {\n        if (view.id < 0) {\n          const newView = (await axios({\n            method: 'post',\n            url: `/api/project/${this.projectId}/views`,\n            responseType: 'json',\n            data: {\n              project_id: this.projectId,\n              title: view.title,\n              position: i,\n            },\n          })).data;\n          view.id = newView.id;\n        } else {\n          await axios({\n            method: 'put',\n            url: `/api/project/${this.projectId}/views/${view.id}`,\n            responseType: 'json',\n            data: {\n              id: view.id,\n              project_id: this.projectId,\n              title: view.title,\n              position: i,\n            },\n          });\n        }\n      } finally {\n        view.disabled = false;\n      }\n      view.active = false;\n    },\n\n    async resetView(viewId) {\n      const view = this.views.find((v) => v.id === viewId);\n      if (view == null) {\n        return;\n      }\n\n      view.disabled = true;\n      try {\n        const oldView = (await axios({\n          method: 'get',\n          url: `/api/project/${this.projectId}/views/${view.id}`,\n          responseType: 'json',\n        })).data;\n        view.title = oldView.title;\n      } finally {\n        view.disabled = false;\n      }\n\n      view.active = false;\n    },\n\n    editView(viewId) {\n      const view = this.views.find((v) => v.id === viewId);\n      if (view == null) {\n        return;\n      }\n      view.active = true;\n    },\n\n    async removeView(viewId) {\n      const i = this.views.findIndex((v) => v.id === viewId);\n      if (i === -1) {\n        return;\n      }\n\n      const view = this.views[i];\n\n      if (view.id >= 0) {\n        view.disabled = true;\n        try {\n          await axios({\n            method: 'delete',\n            url: `/api/project/${this.projectId}/views/${view.id}`,\n            responseType: 'json',\n          });\n        } finally {\n          view.disabled = false;\n        }\n      }\n\n      this.views.splice(i, 1);\n    },\n    addView() {\n      this.views.push({\n        id: -Math.round(Math.random() * 10000000),\n        title: '',\n        active: true,\n        disabled: false,\n      });\n    },\n  },\n};\n</script>\n"],"sourceRoot":"src/components"}]}